package view;

import database.dao.AppointmentDAO;
import database.dao.impl.AppointmentDAOImpl;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import model.Appointment;
import model.Counselor;

/**
 * Home page view
 */
public class HomePage extends javax.swing.JFrame {

    // all the appointments
    private List<Appointment> appointments;

    // Dao to access to the appointments
    private AppointmentDAO appointmentDAO = new AppointmentDAOImpl();

    // static instance of home page
    private static HomePage instance = new HomePage();

    private Counselor user;

    /**
     * Creates new form Home page
     */
    public HomePage() {

        /* Set the windows look and feel */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        // create GUI components
        initComponents();

        // load appointments 
        this.appointments = appointmentDAO.getAllAppointments();
    }

    /**
     * @return the static home page instance
     */
    public static HomePage getInstance() {
        return instance;
    }

    /**
     * To navigate to this page
     */
    public void navigate() {
        instance.setVisible(true);
        // load appointments 
        this.appointments = appointmentDAO.getAllAppointments();
    }

    public void login(Counselor counselor) {
        // logged user
        this.user = counselor;
        // set it to the user interface
        txtLoginAs.setText("Logged as " + user.getName());
        // display the home page
        instance.setVisible(true);
        // load all the appointments when login to the system
        this.appointments = appointmentDAO.getAllAppointments();

        // get the appointments in the next 4 hours
        List<Appointment> appointmentsInTheNext4Hours = getAppointmentsInTheNext4Hours();
        if (appointmentsInTheNext4Hours.isEmpty()) {
            // show an alert when no any appointment in next 4 hours
            JOptionPane.showMessageDialog(this, "No any appointment in the next 4 hours.",
                    "Notification", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // show the notification with list of appointments briefly
            String content = "<html>";
            content += "<b>Appointments in next 4 hours</b><ul>";
            for (Appointment apt : appointmentsInTheNext4Hours) {
                String line = String.format("Patient: %s  Time: %s", apt.getPatient().getName(), apt.getStartDateTime());
                content += "<li>" + line + "</li>";
            }
            content += "</ul></html>";
            // show the alert
            JOptionPane.showMessageDialog(this, content, "Notification", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    // To logout from the system
    private void logout() {
        // navigate to the login page
        new LoginPage().setVisible(true);
    }

    // Returns the current logged user
    public Counselor getUser() {
        return user;
    }

    // Gets the appointments in the next 4 hours
    // USED lamda expression to filter
    private List<Appointment> getAppointmentsInTheNext4Hours() {
        Calendar c = Calendar.getInstance();
        Date now = new Date();
        c.setTime(now); // set the current date to the calendar
        c.add(Calendar.HOUR, 4);
        Date next4HrsTime = c.getTime();
        // USED: lambda
        return appointments
                .stream() // convert list to stream
                .filter(apt -> apt.getCounselor().equals(user) && apt.getStartDateTime().before(next4HrsTime)
                        && apt.getStartDateTime().after(now))
                .collect(Collectors.toList());// return the filtered list
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        btnPatients = new javax.swing.JButton();
        btnAptTypes = new javax.swing.JButton();
        btnAppointments = new javax.swing.JButton();
        btnCalendar = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        txtLoginAs = new javax.swing.JLabel();
        btnReports = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel4.setBackground(new java.awt.Color(32, 123, 198));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Appointment Manager");

        btnPatients.setText("Manage Patients");
        btnPatients.setFocusPainted(false);
        btnPatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientsActionPerformed(evt);
            }
        });

        btnAptTypes.setText("Manage Appointment Types");
        btnAptTypes.setFocusPainted(false);
        btnAptTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAptTypesActionPerformed(evt);
            }
        });

        btnAppointments.setText("Manage Appointments");
        btnAppointments.setFocusPainted(false);
        btnAppointments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAppointmentsActionPerformed(evt);
            }
        });

        btnCalendar.setText("Calendar");
        btnCalendar.setFocusPainted(false);
        btnCalendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalendarActionPerformed(evt);
            }
        });

        btnLogout.setText("Logout");
        btnLogout.setFocusPainted(false);
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        txtLoginAs.setText("jLabel1");

        btnReports.setText("Reports");
        btnReports.setFocusPainted(false);
        btnReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtLoginAs, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99)
                .addComponent(btnLogout)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnReports, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAppointments, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAptTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPatients, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addComponent(btnLogout))
                    .addComponent(txtLoginAs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(59, 59, 59)
                .addComponent(btnPatients, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAptTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAppointments, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnReports, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(96, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        this.setVisible(false);
        logout();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnCalendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalendarActionPerformed

        new CalenderPage().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnCalendarActionPerformed

    private void btnPatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientsActionPerformed

        new PatientsPage().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnPatientsActionPerformed

    private void btnAptTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAptTypesActionPerformed

        new APTtypesPage().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnAptTypesActionPerformed

    private void btnAppointmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAppointmentsActionPerformed

        new AppointmentPage().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnAppointmentsActionPerformed

    private void btnReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportsActionPerformed

        new ReportPage().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnReportsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAppointments;
    private javax.swing.JButton btnAptTypes;
    private javax.swing.JButton btnCalendar;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnPatients;
    private javax.swing.JButton btnReports;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel txtLoginAs;
    // End of variables declaration//GEN-END:variables
}
